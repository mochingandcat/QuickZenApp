package com.tambuchosecretdev.quickzenapp

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.android.gms.auth.api.signin.GoogleSignInAccount
import com.tambuchosecretdev.quickzenapp.firebase.FirebaseManager
import com.tambuchosecretdev.quickzenapp.firebase.SyncState
import com.tambuchosecretdev.quickzenapp.model.Category
import com.tambuchosecretdev.quickzenapp.model.Note
import com.tambuchosecretdev.quickzenapp.model.NoteAppColors
import com.tambuchosecretdev.quickzenapp.repository.NoteRepository
import kotlinx.coroutines.CancellationException
import kotlinx.coroutines.Job
import kotlinx.coroutines.TimeoutCancellationException
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withTimeout

// enum class SyncState local ha sido eliminada y reemplazada por la importación de firebase.SyncState

/**
 * Estados de la migración de la estructura de datos en Firestore
 */
enum class MigrationState {
    IDLE,        // Estado inicial o en reposo
    MIGRATING,   // Migración en progreso
    MIGRATED,    // Migración completada, pendiente de eliminar datos antiguos
    COMPLETED,   // Migración completa y datos antiguos eliminados
    FAILED       // Error en la migración
}

class NotesViewModel<T>(
    private val repository: NoteRepository,
    private val firebaseManager: FirebaseManager
) : ViewModel() {
    
    init {
        checkGoogleAccountStatus()
        refreshNotes()
        setupLatestNotesObserver()
        // Iniciar sincronización en tiempo real si el usuario está conectado
        if (isUserSignedInInternal()) {
            viewModelScope.launch {
                startRealtimeSync()
            }
        }
    }

    /**
     * Verifica si el usuario ha iniciado sesión
     * @return true si el usuario está autenticado, false en caso contrario
     */
    fun isUserSignedIn(): Boolean {
        // Delegamos a nuestro método interno para evitar duplicación
        return isUserSignedInInternal()
    }

    // Este método ya está implementado más abajo
    // private fun refreshNotes() {
    //     TODO("Not yet implemented")
    // }

    private fun setupLatestNotesObserver() {
        
    }

    private fun checkGoogleAccountStatus() {
    }
    
    /**
     * Método interno para verificar si el usuario está autenticado
     * Usamos un nombre distinto para evitar ambigüedades con las múltiples
     * implementaciones de isUserSignedIn que existían en el código original
     */
    private fun isUserSignedInInternal(): Boolean {
        return repository.isUserSignedIn()
    }

    // Flujos (Flows) para la UI
    val categories: Flow<List<Category>> = repository.categoriesFlow
    val activeNotes: Flow<List<Note>> = repository.activeNotesFlow
    val favoriteNotes: Flow<List<Note>> = repository.favoriteNotesFlow
    val trashedNotes: Flow<List<Note>> = repository.notesInTrashFlow

    // Estados para búsqueda y filtros
    private val _searchQuery = MutableStateFlow("")
    val searchQuery: StateFlow<String> = _searchQuery.asStateFlow()

    private val _selectedCategoryId = MutableStateFlow<Long?>(null)
    val selectedCategoryId: StateFlow<Long?> = _selectedCategoryId.asStateFlow()

    private val _isShowingFavorites = MutableStateFlow(false)
    val isShowingFavorites: StateFlow<Boolean> = _isShowingFavorites.asStateFlow()

    // Estados de la UI
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    // Estado de sincronización
    private val _syncState = MutableStateFlow(SyncState.IDLE)
    val syncState: StateFlow<SyncState> = _syncState.asStateFlow()

    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error.asStateFlow()

    private val _operationMessage = MutableStateFlow<String?>(null)
    val operationMessage: StateFlow<String?> = _operationMessage.asStateFlow()

    private val _lastSyncTime = MutableStateFlow(0L)
    val lastSyncTime: StateFlow<Long> = _lastSyncTime.asStateFlow()

    // Estado de la migración de la estructura de datos
    private val _migrationState = MutableStateFlow(MigrationState.IDLE)
    val migrationState: StateFlow<MigrationState> = _migrationState.asStateFlow()

    // Variables para controlar la sincronización
    private var syncJob: Job? = null
    private var isSyncCancelled = false

    private fun handleException(e: Exception, function: () -> Int): Any {
        TODO("Not yet implemented")
    }

    /**
     * Método público para iniciar la sincronización desde la UI
     * Maneja todo el ciclo de sincronización, incluyendo estados, mensajes y errores
     */
    fun startSync() {
        // Evitar múltiples sincronizaciones simultáneas
        if (_syncState.value == SyncState.SYNCING) {
            viewModelScope.launch {
                _operationMessage.emit("Ya hay una sincronización en progreso")
            }
            return
        }
        
        viewModelScope.launch {
            Log.d("NotesViewModel", "Iniciando sincronización desde la UI")
            _syncState.value = SyncState.SYNCING
            _isLoading.value = true
            
            try {
                val success = syncWithFirebase()
                if (success) {
                    Log.d("NotesViewModel", "Sincronización completada con éxito")
                    _operationMessage.emit("¡Sincronización completada!")
                    _syncState.value = SyncState.SYNCED
                } else {
                    Log.w("NotesViewModel", "Sincronización no exitosa")
                    _operationMessage.emit("No se pudo completar la sincronización")
                    _syncState.value = SyncState.FAILED
                }
            } catch (e: Exception) {
                Log.e("NotesViewModel", "Error durante sincronización", e)
                _error.emit("Error: ${e.message}")
                _syncState.value = SyncState.FAILED
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    /**
     * Sincroniza con Firebase usando nuestro enfoque optimizado
     * Este método realiza sincronización bidireccional completa: sube datos locales y descarga cambios del servidor
     * 
     * @return true si la sincronización fue exitosa, false en caso contrario
     */
    suspend fun syncWithFirebase(): Boolean {
        // Cancelar sincronización previa si existe
        syncJob?.cancel()
        isSyncCancelled = false

        // Marcar como sincronizando
        _syncState.value = SyncState.SYNCING
        
        try {
            // Verificamos que el usuario esté autenticado
            if (!repository.isUserSignedIn()) {
                _syncState.value = SyncState.NOT_SIGNED_IN
                _error.emit("No hay sesión iniciada. Inicie sesión para sincronizar.")
                return false
            }
            
            Log.d("NotesViewModel", "Llamando a repository.syncAllWithFirebase()")
            
            // Iniciamos la sincronización con el repositorio con timeout de 30 segundos
            val syncSuccess = withTimeout(30000) {
                repository.syncAllWithFirebase()
                true
            }
            
            if (isSyncCancelled) {
                _syncState.value = SyncState.CANCELLED
                _operationMessage.emit("Sincronización cancelada")
                return false
            }

            // Actualizamos el estado de sincronización
            _syncState.value = SyncState.SYNCED
            _lastSyncTime.value = repository.getLastSyncTime() ?: System.currentTimeMillis()
            _operationMessage.emit("Sincronización completada correctamente")
            
            return syncSuccess
        } catch (e: TimeoutCancellationException) {
            Log.e("NotesViewModel", "Timeout durante la sincronización", e)
            _syncState.value = SyncState.FAILED
            _error.emit("La sincronización ha tomado demasiado tiempo. Inténtelo de nuevo.")
            return false
        } catch (e: CancellationException) {
            _syncState.value = SyncState.CANCELLED
            _operationMessage.emit("Sincronización cancelada")
            return false
        } catch (e: Exception) {
            // Manejo de diferentes tipos de errores
            when {
                e.message?.contains("No hay sesión iniciada") == true -> {
                    _syncState.value = SyncState.NOT_SIGNED_IN
                    _error.emit("No hay sesión iniciada. Inicie sesión para sincronizar.")
                    return false
                }
                e.message?.contains("Sin conexión") == true -> {
                    _syncState.value = SyncState.NO_CONNECTION
                    _error.emit("Sin conexión a internet. Verifique su conexión e intente de nuevo.")
                    return false
                }
                else -> {
                    _syncState.value = SyncState.FAILED
                    _error.emit("Error de sincronización: ${e.message}")
                    Log.e("NotesViewModel", "Error al sincronizar con Firebase", e)
                    return false
                }
            }
        } finally {
            _isLoading.value = false
        }
    }

    /**
     * Cancela la sincronización en curso
     */
    fun cancelSync() {
        if (_syncState.value == SyncState.SYNCING) {
            syncJob?.cancel()
            isSyncCancelled = true
            _syncState.value = SyncState.CANCELLED
            _operationMessage.value = "Sincronización cancelada."
            _isLoading.value = false
        }
    }

    /**
     * Inicia la sincronización en tiempo real si el usuario está conectado
     */
    private suspend fun startRealtimeSync() {
        if (!isUserSignedIn()) return
        
        try {
            // Esta función ahora establece listeners en Firebase
            firebaseManager.startRealtimeSync { changes ->
                if (changes > 0) {
                    Log.d("NotesViewModel", "Recibidos $changes cambios en tiempo real.")
                    refreshNotes()
                    _operationMessage.value = "Se han recibido $changes actualizaciones."
                }
            }
            Log.d("NotesViewModel", "Sincronización en tiempo real iniciada.")
        } catch (e: Exception) {
            Log.e("NotesViewModel", "Error al iniciar sincronización en tiempo real", e)
        }
    }

    /**
     * Detiene la sincronización en tiempo real
     */
    fun stopRealtimeSync() {
        viewModelScope.launch {
            try {
                firebaseManager.stopRealtimeSync()
                Log.d("NotesViewModel", "Sincronización en tiempo real detenida.")
            } catch (e: Exception) {
                Log.e("NotesViewModel", "Error al detener sincronización en tiempo real", e)
            }
        }
    }

    /**
     * Refresca las notas para reflejar los cambios en la base de datos
     */
    private fun refreshNotes() {
        viewModelScope.launch {
            repository.refreshNotes()
        }
    }

    /**
     * Obtiene una nota por ID
     */
    suspend fun getNoteById(id: Long): Note? {
        return repository.getNoteById(id)
    }

    /**
     * Agrega una nueva nota
     */
    suspend fun addNote(
        title: String, 
        content: String, 
        colorId: String = NoteAppColors.DEFAULT_COLOR_ID,
        categoryId: Long? = null, 
        isFavorite: Boolean = false,
        isLocked: Boolean = false,
        images: List<String> = emptyList(),
        reminder: Long? = null
    ): Long {
        if (title.isEmpty() && content.isEmpty()) {
            _error.value = "La nota está vacía"
            return 0
        }

        val note = Note(
            id = 0,  // La base de datos asignará un ID automáticamente
            title = title,
            content = content,
            createdDate = System.currentTimeMillis(),
            modifiedDate = System.currentTimeMillis(),
            isFavorite = isFavorite,
            isInTrash = false,
            categoryId = categoryId,
            reminderDateTime = reminder,
            cloudId = null,  // Se asignará durante la sincronización
            needsSync = true,
            colorId = colorId,
            isLocked = isLocked,
            images = images
        )
        try {
            _isLoading.value = true
            val noteId = repository.addNote(note)
            Log.d("NotesViewModel", "Nota creada con ID: $noteId")

            if (noteId > 0) {
                refreshNotes()

                // Si el usuario está conectado, intentamos sincronizar inmediatamente
                if (isUserSignedIn()) {
                    viewModelScope.launch {
                        try {
                            syncWithFirebase()
                        } catch (e: Exception) {
                            Log.e("NotesViewModel", "Error al sincronizar nueva nota", e)
                            // No reportamos el error al usuario para no interrumpir el flujo
                        }
                    }
                }

                _operationMessage.value = "Nota guardada correctamente"
                return noteId
            } else {
                _error.value = "Error al crear la nota"
                return 0
            }
        } catch (e: Exception) {
            _error.value = "Error al guardar la nota: ${e.message}"
            Log.e("NotesViewModel", "Error al añadir nota", e)
            return 0
        } finally {

            /**
             * Actualiza una nota existente optimizando la sincronización con Firebase
             * para evitar duplicados
             */
            fun updateNote(
                id: Long,
                title: String,
                content: String,
                categoryId: Long?,
                reminder: Long? = null,
                colorId: String = NoteAppColors.DEFAULT_COLOR_ID,
                isFavorite: Boolean = false,
                isLocked: Boolean = false,
                images: List<String> = emptyList()
            ) {
                if (title.isEmpty() && content.isEmpty()) {
                    _error.value = "La nota está vacía"
                    return
                }

                viewModelScope.launch {
                    try {
                        _isLoading.value = true

                        // Obtener la nota actual para preservar otros campos
                        val currentNote = repository.getNoteById(id)
                        if (currentNote == null) {
                            _error.value = "No se encontró la nota para actualizar"
                            return@launch
                        }

                        // Verificar si la nota tiene un userId, si no, generar uno
                        val userId = currentNote.userId ?: java.util.UUID.randomUUID().toString()

                        // Actualizar todos los campos proporcionados
                        val updatedNote = currentNote.copy(
                            title = title,
                            content = content,
                            modifiedDate = System.currentTimeMillis(),
                            categoryId = categoryId,
                            reminderDateTime = reminder,
                            colorId = colorId,
                            isFavorite = isFavorite,
                            isLocked = isLocked,
                            images = images,
                            userId = userId,  // Asegurar que siempre tenga un userId
                            needsSync = true  // Marcar como pendiente de sincronización
                        )

                        repository.updateNote(updatedNote)
                        Log.d("NotesViewModel", "Nota actualizada localmente: id=$id, cloudId=${updatedNote.cloudId}")

                        // Si el usuario está conectado, sincronizar esta nota inmediatamente
                        if (isUserSignedIn() && firebaseManager.isConnected()) {
                            try {
                                // Usar saveNote para guardar/actualizar la nota en Firebase
                                // Esto manejará correctamente si es una actualización o una creación
                                val cloudId = firebaseManager.saveNote(updatedNote)

                                if (cloudId != null) {
                                    // Actualizar el cloudId y marcar como sincronizada (needsSync = false)
                                    repository.updateNoteAfterSync(id, cloudId)
                                    Log.d("NotesViewModel", "Nota sincronizada exitosamente: id=$id, cloudId=$cloudId")
                                } else {
                                    Log.w("NotesViewModel", "No se pudo obtener cloudId al sincronizar nota: $id")
                                    // No cambiamos el estado needsSync para que se intente sincronizar más tarde
                                }
                            } catch (e: Exception) {
                                Log.e("NotesViewModel", "Error al sincronizar nota actualizada: ${e.message}", e)
                                // No reportamos el error al usuario para no interrumpir el flujo
                            }
                        } else {
                            Log.d("NotesViewModel", "Usuario no conectado o sin internet. La nota se sincronizará más tarde.")
                        }

                        _operationMessage.value = "Nota actualizada correctamente"
                        refreshNotes()
                    } catch (e: Exception) {
                        _error.value = "Error al actualizar la nota: ${e.message}"
                        Log.e("NotesViewModel", "Error al actualizar nota", e)
                    } finally {
                        _isLoading.value = false
                    }
                }
            }
/**
 * Elimina una nota moviendo a la papelera
 */
fun deleteNoteById(id: Long) {
    viewModelScope.launch {
        try {
            _isLoading.value = true
            
            // Eliminar la nota usando el repositorio
            repository.deleteNoteById(id)
            
            // Si el usuario está conectado, sincronizar este cambio
            if (isUserSignedIn()) {
                try {
                    val note = repository.getNoteById(id)
                    note?.let {
                        firebaseManager.updateNote(it)
                        Log.d("NotesViewModel", "Nota eliminada y sincronizada con Firebase: $id")
                    }
                } catch (e: Exception) {
                    Log.e("NotesViewModel", "Error al sincronizar nota eliminada", e)
                    // No mostramos error al usuario porque la operación local tuvo éxito
                }
            }
            
            refreshNotes()
            
        } catch (e: Exception) {
            _error.value = "Error al eliminar la nota: ${e.message}"
            Log.e("NotesViewModel", "Error al eliminar nota", e)
        } finally {
            _isLoading.value = false
        }
    }
}

/**
 * Cambia el estado de favorito de una nota
 */
fun toggleFavoriteStatus(id: Long) {
    viewModelScope.launch {
        try {
            val note = repository.getNoteById(id)
            if (note != null) {
                val updatedNote = note.copy(
                    isFavorite = !note.isFavorite,
                    modifiedDate = System.currentTimeMillis(),
                    needsSync = true
                )
                repository.updateNote(updatedNote)

                // Si el usuario está conectado, sincronizar el cambio
                if (isUserSignedIn()) {
                    try {
                        firebaseManager.updateNote(updatedNote)
                    } catch (e: Exception) {
                        Log.e("NotesViewModel", "Error al sincronizar cambio de favorito", e)
                    }
                }

                _operationMessage.value = if (updatedNote.isFavorite)
                                        "Nota añadida a favoritos"
                                     else
                                        "Nota eliminada de favoritos"
                refreshNotes()
            }
        } catch (e: Exception) {
            _error.value = "Error al cambiar estado de favorito: ${e.message}"
            Log.e("NotesViewModel", "Error al cambiar favorito", e)
        }
    }
}

/**
 * Envía una nota a la papelera
 */
fun moveNoteToTrash(id: Long) {
    viewModelScope.launch {
        try {
            val note = repository.getNoteById(id)
            if (note != null) {
                val updatedNote = note.copy(
                    isInTrash = true,
                repository.updateNote(updatedNote)
                Log.d("NotesViewModel", "Nota actualizada localmente: id=$id, cloudId=${updatedNote.cloudId}")

                // Si el usuario está conectado, sincronizar esta nota inmediatamente
                if (isUserSignedIn() && firebaseManager.isConnected()) {
                    try {
                        // Usar saveNote para guardar/actualizar la nota en Firebase
                        // Esto manejará correctamente si es una actualización o una creación
                        val cloudId = firebaseManager.saveNote(updatedNote)
                        
                        if (cloudId != null) {
                            // Actualizar el cloudId y marcar como sincronizada (needsSync = false)
                            repository.updateNoteAfterSync(id, cloudId)
                            Log.d("NotesViewModel", "Nota sincronizada exitosamente: id=$id, cloudId=$cloudId")
                        } else {
                            Log.w("NotesViewModel", "No se pudo obtener cloudId al sincronizar nota: $id")
                            // No cambiamos el estado needsSync para que se intente sincronizar más tarde
                        }
                    } catch (e: Exception) {
                        Log.e("NotesViewModel", "Error al sincronizar nota actualizada: ${e.message}", e)
                        // No reportamos el error al usuario para no interrumpir el flujo
                    }
                } else {
                    Log.d("NotesViewModel", "Usuario no conectado o sin internet. La nota se sincronizará más tarde.")
                }

                _operationMessage.value = "Nota actualizada correctamente"
                refreshNotes()
            } catch (e: Exception) {
                _error.value = "Error al actualizar la nota: ${e.message}"
                Log.e("NotesViewModel", "Error al actualizar nota", e)
            } finally {
                _isLoading.value = false
            }
        }
    }

    /**
     * Cambia el estado de favorito de una nota
     */
    fun toggleFavoriteStatus(id: Long) {
        viewModelScope.launch {
            try {
                val note = repository.getNoteById(id)
                if (note != null) {
                    val updatedNote = note.copy(
                        isFavorite = !note.isFavorite,
                        modifiedDate = System.currentTimeMillis(),
                        needsSync = true
                    )
                    repository.updateNote(updatedNote)

                    // Si el usuario está conectado, sincronizar el cambio
                    if (isUserSignedIn()) {
                        try {
                            firebaseManager.updateNote(updatedNote)
                        } catch (e: Exception) {
                            Log.e("NotesViewModel", "Error al sincronizar cambio de favorito", e)
                        }
                    }

                    _operationMessage.value = if (updatedNote.isFavorite)
                                            "Nota añadida a favoritos"
                                         else
                                            "Nota eliminada de favoritos"
                    refreshNotes()
                }
            } catch (e: Exception) {
                _error.value = "Error al cambiar estado de favorito: ${e.message}"
                Log.e("NotesViewModel", "Error al cambiar favorito", e)
            }
        }
    }

    /**
     * Envía una nota a la papelera
     */
    fun moveNoteToTrash(id: Long) {
        viewModelScope.launch {
            try {
                val note = repository.getNoteById(id)
                if (note != null) {
                    val updatedNote = note.copy(
                        isInTrash = true,
                        modifiedDate = System.currentTimeMillis(),
                        needsSync = true
                    )
                    repository.updateNote(updatedNote)

                    // Si el usuario está conectado, sincronizar el cambio
                    if (isUserSignedIn()) {
                        try {
                            // Usar saveNote en lugar de updateNote para manejar casos donde cloudId podría ser null
                            val cloudId = firebaseManager.saveNote(updatedNote)
                            if (cloudId != null) {
                                // Si la nota no tenía cloudId, actualizar su estado de sincronización en local
                                if (updatedNote.cloudId == null) {
                                    repository.updateNoteSyncStatus(id, cloudId)
                                    Log.d("NotesViewModel", "Nota enviada a papelera con nuevo cloudId: $cloudId")
                                }
                                Log.d("NotesViewModel", "Nota enviada a papelera y sincronizada con Firebase: $id")
                            } else {
                                Log.w("NotesViewModel", "No se pudo sincronizar nota enviada a papelera: $id")
                            }
                        } catch (e: Exception) {
                            Log.e("NotesViewModel", "Error al sincronizar nota enviada a papelera", e)
                        }
                    }

                    _operationMessage.value = "Nota enviada a la papelera"
                    refreshNotes()
                }
            } catch (e: Exception) {
                _error.value = "Error al mover nota a la papelera: ${e.message}"
                Log.e("NotesViewModel", "Error al mover a papelera", e)
            }
        }
    }
    fun deleteNotePermanently(id: Long) {
        viewModelScope.launch {
            try {
                val note = repository.getNoteById(id)
                if (note != null) {
                    // Si la nota tiene un ID en la nube, la eliminamos también allí
                    if (isUserSignedIn() && note.cloudId != null) {
                        try {
                            firebaseManager.deleteNote(note.cloudId!!)
                        } catch (e: Exception) {
                            Log.e("NotesViewModel", "Error al eliminar nota de la nube", e)
                        }
                    }

                    repository.deleteNotePermanently(id)
                    _operationMessage.value = "Nota eliminada permanentemente"
                    refreshNotes()
                }
            } catch (e: Exception) {
                _error.value = "Error al eliminar nota: ${e.message}"
                Log.e("NotesViewModel", "Error al eliminar nota", e)
            }
        }
    }

    /**
     * Elimina todas las notas de la papelera
     */
    fun emptyTrash() {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                val trashedNotes = repository.getNotesInTrash()

                // Eliminar notas en Firebase si el usuario está conectado
                if (isUserSignedIn()) {
                    for (note in trashedNotes) {
                        if (note.cloudId != null) {
                            try {
                                firebaseManager.deleteNote(note.cloudId!!)
                            } catch (e: Exception) {
                                Log.e("NotesViewModel", "Error al eliminar nota ${note.id} de la nube", e)
                            }
                        }
                    }
                }

                // Eliminar localmente
                repository.emptyTrash()

                _operationMessage.value = "Papelera vaciada"
                refreshNotes()
            } catch (e: Exception) {
                _error.value = "Error al vaciar la papelera: ${e.message}"
                Log.e("NotesViewModel", "Error al vaciar papelera", e)
            } finally {
                _isLoading.value = false
            }
        }
    }

    // Método isUserSignedIn() ha sido movido a la parte superior del archivo
    // para evitar duplicación y ambigüedad

    /**
     * Actualiza la cuenta de Google
     */
    private suspend fun updateGoogleAccount(account: GoogleSignInAccount) {
        _isLoading.value = true
        try {
            // Usar el FirebaseManager para iniciar sesión con Google
            val success = firebaseManager.signInWithGoogle(account)

            if (success) {
                _operationMessage.value = "Cuenta actualizada correctamente"
                // Sincronizar datos después de iniciar sesión
                syncWithFirebase()
            } else {
                _error.value = "No se pudo iniciar sesión con Google"
            }
        } catch (e: Exception) {
            _error.value = "Error al actualizar la cuenta: ${e.message}"
            Log.e("NotesViewModel", "Error al actualizar cuenta Google", e)
        } finally {
            _isLoading.value = false
        }
    }

    /**
     * Establece la query de búsqueda
     */
    fun setSearchQuery(query: String) {
        _searchQuery.value = query
    }

    /**
     * Establece la categoría seleccionada
     */
    fun setSelectedCategory(categoryId: Long?) {
        _selectedCategoryId.value = categoryId
    }

    /**
     * Cambia el estado de mostrar sólo favoritos
     */
    fun toggleShowingFavorites() {
        _isShowingFavorites.value = !_isShowingFavorites.value
    }

    /**
     * Limpia los mensajes de error
     */
    fun clearError() {
        _error.value = null
    }

    /**
     * Limpia los mensajes de operación
     */
    fun clearOperationMessage() {
        _operationMessage.value = null
    }

    /**
     * Migra los datos de la estructura antigua a la nueva estructura segura
     */
    fun migrateToSecureStructure() {
        if (!isUserSignedIn()) {
            _error.value = "Debes iniciar sesión para realizar la migración."
            return
        }

        if (_migrationState.value == MigrationState.MIGRATING) {
            _operationMessage.value = "Ya hay una migración en progreso."
            return
        }

        _migrationState.value = MigrationState.MIGRATING
        _isLoading.value = true

        viewModelScope.launch {
            try {
                Log.d("NotesViewModel", "[MIGRATION] Iniciando migración a estructura segura...")

                // Realizar la migración
                val result = firebaseManager.migrateToSecureStructure()

                // Verificar si la migración fue exitosa
                _migrationState.value = MigrationState.MIGRATED
                _operationMessage.value = "Migración completada. Ahora puedes eliminar los datos de la estructura antigua."
                Log.d("NotesViewModel", "[MIGRATION] Migración exitosa")
                
            } catch (e: Exception) {
                _migrationState.value = MigrationState.FAILED
                _error.value = "Error en la migración: ${e.message}"
                Log.e("NotesViewModel", "[MIGRATION] Excepción durante migración", e)
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    /**
     * Elimina las notas de la estructura antigua después de que se hayan migrado.
     * Este método debe llamarse después de confirmar que la migración fue exitosa.
     */
    fun deleteOldStructureNotes() {
        viewModelScope.launch {
            try {
                if (_migrationState.value != MigrationState.MIGRATED && _migrationState.value != MigrationState.FAILED) {
                    _error.value = "Debes completar la migración antes de eliminar las notas antiguas."
                    return@launch
                }
                
                _isLoading.value = true
                Log.d("NotesViewModel", "[MIGRATION] Eliminando notas de la estructura antigua...")
                
                val deletedCount = firebaseManager.deleteOldStructureNotes()
                
                if (deletedCount > 0) {
                    _operationMessage.value = "$deletedCount notas antiguas eliminadas correctamente."
                    _migrationState.value = MigrationState.COMPLETED
                } else {
                    _operationMessage.value = "No se encontraron notas antiguas para eliminar."
                }
                
                _isLoading.value = false
                
            } catch (e: Exception) {
                Log.e("NotesViewModel", "[MIGRATION] Error al eliminar notas antiguas", e)
                _error.value = "Error al eliminar notas antiguas: ${e.message}"
                _isLoading.value = false
            }
        }
    }
    
    /**
     * Establece la query de búsqueda con un contexto
     * Método alternativo para compatibilidad
     */
    fun setSearchQuery(newQuery: android.content.Context) {
        // Implementación simplificada
    }

    fun restoreNotesFromBackup(importedNotes: List<Note>): Boolean {
        TODO("Not yet implemented")
    }

    fun deleteAllCloudData() {
        TODO("Not yet implemented")
    }

    /**
     * Versión no suspendida de getNoteById, que utiliza un callback para devolver el resultado
     * @param noteId ID de la nota a obtener
     * @param callback Función que será llamada con la nota encontrada o null si no existe
     */
    fun getNoteByIdNonSuspend(noteId: Long, callback: (Note?) -> Unit) {
        viewModelScope.launch {
            try {
                val note = repository.getNoteById(noteId)
                callback(note)
            } catch (e: Exception) {
                Log.e("NotesViewModel", "Error al obtener la nota con ID: $noteId", e)
                callback(null)
            }
        }
    }

    fun silentSignInAndSync(googleAccount: GoogleSignInAccount) {
        // Implementación pendiente
    }
    
    // La implementación de deleteNotePermanently se ha unificado en una sola función no suspendida
    // que se encuentra en otra parte del código
    
    /**
     * Migra las notas a la nueva estructura de Firestore
     */
    fun migrateNotesToNewStructure(confirmBeforeDelete: Boolean) {
        viewModelScope.launch {
            try {
                _migrationState.value = MigrationState.MIGRATING
                // Implementación pendiente de la migración real
                _migrationState.value = MigrationState.MIGRATED
                _operationMessage.value = "Migración completada. Ahora puedes eliminar los datos antiguos."
            } catch (e: Exception) {
                _migrationState.value = MigrationState.FAILED
                _error.value = "Error en la migración: ${e.message}"
                Log.e("NotesViewModel", "Error en la migración", e)
            }
        }
    }
    
    /**
     * Sincroniza las notas con Firestore
     */
    fun syncFirestoreNotes() {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _syncState.value = SyncState.SYNCING
                // Implementación pendiente de la sincronización real
                _syncState.value = SyncState.SYNCED
                _operationMessage.value = "Sincronización completada correctamente."
            } catch (e: Exception) {
                _syncState.value = SyncState.FAILED
                _error.value = "Error de sincronización: ${e.message}"
                Log.e("NotesViewModel", "Error en la sincronización", e)
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    /**
     * Inicia el proceso de sincronización
     */
    fun initiateSyncProcess() {
        viewModelScope.launch {
            try {
                syncWithFirebase()
            } catch (e: Exception) {
                _error.value = "Error al iniciar el proceso de sincronización: ${e.message}"
                Log.e("NotesViewModel", "Error al iniciar sincronización", e)
            }
        }
    }

    /**
     * Agrega una nueva categoría a la base de datos.
     * @param categoryName Nombre de la categoría a crear
     * @return ID de la categoría creada o -1 si hubo un error
     */
    suspend fun addCategory(categoryName: String): Long {
        val timestamp = System.currentTimeMillis()
        val category = Category(
            id = 0, // La base de datos asignará el ID real
            name = categoryName,
            createdDate = timestamp,
            modifiedDate = timestamp,
            cloudId = null,
            needsSync = true
        )
        
        return try {
            val categoryId = repository.insertCategory(category)
            Log.d("NotesViewModel", "Categoría creada con ID: $categoryId")
            _operationMessage.emit("Categoría creada correctamente")
            categoryId
        } catch (e: Exception) {
            Log.e("NotesViewModel", "Error al crear categoría: ${e.message}")
            _error.emit("Error al crear categoría: ${e.message}")
            -1L
        }
    }

    fun refreshCategories() {
        viewModelScope.launch {
            repository.refreshCategories()
        }
    }
    
    // Función para iniciar la sincronización desde la UI (no suspendida)
    // Esta función es para compatibilidad con llamadas desde la UI
    fun initiateSync() {
        viewModelScope.launch {
            syncWithFirebase()
        }
    }
    
    // Este método se ha comentado porque está duplicado con el de la línea 573
    // /**
    //  * Verifica si el usuario está autenticado
    //  * @return true si el usuario está autenticado, false en caso contrario
    //  */
    // fun isUserSignedIn(): Boolean {
    //    // Delegamos al repositorio
    //    return repository.isUserSignedIn()
    // }

    /**
     * Mueve una nota a la papelera
     */
    fun moveToTrash(id: Long) {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                // Utilizar moveNoteToTrash existente para mover la nota a la papelera
                moveNoteToTrash(id)
                _operationMessage.value = "Nota movida a la papelera"
                refreshNotes() // Actualizar la lista de notas
            } catch (e: Exception) {
                _error.value = "Error al mover la nota a la papelera: ${e.message}"
                Log.e("NotesViewModel", "Error al mover nota a la papelera", e)
            } finally {
                _isLoading.value = false
            }
        }
    }

    fun setSelectedCategoryId(categoryId: Long?) {
        _selectedCategoryId.value = categoryId
    }

    fun sortNotesByDate() {
        TODO("Not yet implemented")
    }
}
